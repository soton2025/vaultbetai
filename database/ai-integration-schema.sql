-- AI Integration Database Schema Updates
-- Run this SQL to add tables needed for OpenAI integration

-- Store AI analysis results from comprehensive match analysis
CREATE TABLE IF NOT EXISTS ai_analyses (
  id SERIAL PRIMARY KEY,
  match_id VARCHAR(255) UNIQUE NOT NULL,
  analysis_data JSONB NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Store user recommendations generated by AI
CREATE TABLE IF NOT EXISTS user_recommendations (
  id SERIAL PRIMARY KEY,
  user_id VARCHAR(255) NOT NULL,
  recommendations JSONB NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Store daily tips generated by AI system
CREATE TABLE IF NOT EXISTS daily_tips (
  id SERIAL PRIMARY KEY,
  date DATE UNIQUE NOT NULL,
  tips JSONB NOT NULL,
  summary JSONB NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Store personalized tips for individual users
CREATE TABLE IF NOT EXISTS user_personalized_tips (
  id SERIAL PRIMARY KEY,
  user_id VARCHAR(255) NOT NULL,
  tips JSONB NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Store user preferences (if not already existing)
CREATE TABLE IF NOT EXISTS user_preferences (
  id SERIAL PRIMARY KEY,
  user_id VARCHAR(255) UNIQUE NOT NULL,
  preferences JSONB NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Store user betting statistics (if not already existing)
CREATE TABLE IF NOT EXISTS user_betting_stats (
  id SERIAL PRIMARY KEY,
  user_id VARCHAR(255) UNIQUE NOT NULL,
  win_rate DECIMAL(5,2),
  total_bets INTEGER DEFAULT 0,
  avg_stake DECIMAL(10,2),
  risk_level VARCHAR(10) DEFAULT 'medium',
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_ai_analyses_match_id ON ai_analyses(match_id);
CREATE INDEX IF NOT EXISTS idx_user_recommendations_user_id ON user_recommendations(user_id);
CREATE INDEX IF NOT EXISTS idx_daily_tips_date ON daily_tips(date);
CREATE INDEX IF NOT EXISTS idx_user_personalized_tips_user_id ON user_personalized_tips(user_id);
CREATE INDEX IF NOT EXISTS idx_user_preferences_user_id ON user_preferences(user_id);
CREATE INDEX IF NOT EXISTS idx_user_betting_stats_user_id ON user_betting_stats(user_id);

-- Add updated_at trigger for ai_analyses
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_ai_analyses_updated_at BEFORE UPDATE ON ai_analyses 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_daily_tips_updated_at BEFORE UPDATE ON daily_tips 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_preferences_updated_at BEFORE UPDATE ON user_preferences 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_betting_stats_updated_at BEFORE UPDATE ON user_betting_stats 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();